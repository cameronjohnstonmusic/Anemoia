<jittershader name="default">
    <description>Default Slab</description>
    <param name="scale" type="float" default="1.0" />
    <param name="tex0" type="int" default="0" />
    <param name="modelViewProjectionMatrix" type="mat4" state="MODELVIEW_PROJECTION_MATRIX" />
    <param name="textureMatrix0" type="mat4" state="TEXTURE0_MATRIX" />
    <param name="position" type="vec3" state="POSITION" />
    <param name="texcoord" type="vec2" state="TEXCOORD" />
    <param name="color" type="vec4" state="COLOR" />
    <param name="iTime" type="float" default="0" />
    <param name="iResolution" type="vec2" state="VIEWPORT" />
    <param name="iMouse" type="vec2" default="0" />
    <param name="dir" type="vec3" default="vec3(1.0, 0.0, 0.0)" />
	<param name="blackholeIntensity" type="float" default="1.0" />
	<param name="blackholeRadius" type="float" default="1.2" />
	<param name="ratio" type="float" default="1" />
	<param name="zoomOut" type="float" default="1.0" />
	<param name="stepsize" type="float" default="0.2" />
	<param name="tile" type="float" default="1." />
	<param name="volsteps" type="float" default="10." />
    <language name="glsl" version="1.5">
        <bind param="scale" program="fp" />
        <bind param="tex0" program="fp" />
        <bind param="iTime" program="fp" />
        <bind param="iResolution" program="fp" />
        <bind param="modelViewProjectionMatrix" program="vp" />
        <bind param="textureMatrix0" program="vp" />
        <bind param="position" program="vp" />
        <bind param="texcoord" program="vp" />
        <bind param="color" program="vp" />
        <bind param="iMouse" program="fp" />
        <bind param="dir" program="fp" />
		<bind param="ratio" program="fp" />
		<bind param="blackholeRadius" program="fp" />
		<bind param="blackholeIntensity" program="fp" />
		<bind param="stepsize" program="fp" />
		<bind param="tile" program="fp" />
		<bind param="volsteps" program="fp" />
        <program name="vp" type="vertex">
		<bind param="zoomOut" program="fp" />
		  <![CDATA[
                #version 330 core

                in vec3 position;
                in vec2 texcoord; 
                in vec4 color; 

               out jit_PerVertex {
    vec2 texcoord; // Declare texcoord as an out variable
    vec4 color;
} jit_out;

                uniform mat4 modelViewProjectionMatrix;
                uniform mat4 textureMatrix0;

                void main(void) {
                    gl_Position = modelViewProjectionMatrix * vec4(position, 1.0);
                    jit_out.texcoord = vec2(textureMatrix0 * vec4(texcoord, 0.0, 1.0));
                    jit_out.color = color;
                }
            ]]>
		</program>
		
		<program name="fp" type="fragment"  >
		<![CDATA[
                #version 330 core
				in jit_PerVertex {
					vec2 texcoord;
					vec4 color;
				} jit_in;
				layout (location = 0) out vec4 outColor;

				uniform sampler2DRect tex0;
				uniform float scale;
				uniform float iTime;
				uniform vec2 iResolution;
				uniform vec2 iMouse;
				uniform vec3 dir;
				uniform vec2 uv;
				uniform float blackholeIntensity;
				uniform float blackholeRadius;
				uniform float ratio;
				uniform float zoomOut;
				uniform float blackholeCenter;
				uniform float stepsize;
				uniform float tile;
				uniform float volsteps;

			// Star Nest by Pablo RomÃ¡n Andrioli

// This content is under the MIT License.

#define iterations 12
#define formuparam 0.57

// #define volsteps 10
// #define stepsize 0.2

#define zoom 1.200
//#define zoomOut 1.0 
// #define tile   1.0
#define speed  0.010 

#define brightness 0.0015
#define darkmatter 1.00
#define distfading 0.730
#define saturation 1.0


#define mo (2.0 * iMouse.xy - iResolution.xy) / iResolution.y
#define blackholeCenter vec3(time*2.,time,-2.)
//#define blackholeCenter vec3(time*2.,time,-2.)
//#define blackholeRadius 1.2
//#define blackholeIntensity 1.0
#define output 1.0

float iSphere(vec3 ray, vec3 dir, vec3 center, float radius)
{
	vec3 rc = ray-center;
	float c = dot(rc, rc) - (radius*radius);
	float b = dot(dir, rc);
	float d = b*b - c;
	float t = -b - sqrt(abs(d));
	float st = step(0.0, min(t,d));
	return mix(-1.0, t, st);
}

vec3 iPlane(vec3 ro, vec3 rd, vec3 po, vec3 pd){
    float d = dot(po - ro, pd) / dot(rd, pd);
    return d * rd + ro;
}

vec3 r(vec3 v, vec2 r)//incomplete but ultrafast rotation fcn thnx to rodolphito
{
    vec4 t = sin(vec4(r, r + 1.5707963268));
    float g = dot(v.yz, t.yw);
    return vec3(v.x * t.z - g * t.x,
                v.y * t.w - v.z * t.y,
                v.x * t.x + g * t.z);
}

void main()
{
	//get coords and direction
	vec2 uv=jit_in.texcoord/iResolution.xy-.5;
	uv.y*=iResolution.y/iResolution.x;
	uv.x*=ratio;
	vec3 dir=vec3(uv * zoom * zoomOut, 1.0);
	 float time = iTime * speed + 0.25;

	//mouse rotation
	vec3 from=vec3(0.0, 0.0, -15.0);
    from = r(from, mo / 10.0);
    dir = r(dir, mo / 10.0);
	from+=blackholeCenter;
	
    vec3 nml = normalize(blackholeCenter - from);
    vec3 pos = iPlane(from, dir, blackholeCenter, nml);
    pos = blackholeCenter - pos;
    float intensity = dot(pos, pos);
    if(intensity > blackholeRadius * blackholeRadius){
        intensity = 1.0 / intensity;
    	dir = mix(dir, pos * sqrt(intensity), blackholeIntensity * intensity);
    	
		//volumetric rendering
		float s=0.1,fade=1.;
		vec3 v=vec3(0.);
		for (int r=0; r<volsteps; r++) {
			vec3 p=from+s*dir*.5;
			p = abs(vec3(tile)-mod(p,vec3(tile*2.))); // tiling fold
			float pa,a=pa=0.;
			for (int i=0; i<iterations; i++) { 
				p=abs(p)/dot(p,p)-formuparam; // the magic formula
				a+=abs(length(p)-pa); // absolute sum of average change
				pa=length(p);
			}
			float dm=max(0.,darkmatter-a*a*.001); //dark matter
			a*=a*a; // add contrast
			if (r>6) fade*=1.-dm; // dark matter, don't render near
			//v+=vec3(dm,dm*.5,0.);
			v+=fade;
			v+=vec3(s,s*s,s*s*s*s)*a*brightness*fade; // coloring based on distance
			fade*=distfading; // distance fading
			s+=stepsize;
		}
		v=mix(vec3(length(v)),v,saturation); //color adjust
		outColor = vec4(v*.01,1.);	
    }
    else outColor = vec4(0.0);

	//outColor = vec4(1.0);
}
		]]>
		</program>
	</language>
</jittershader>
