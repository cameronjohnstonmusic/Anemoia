<jittershader name="texture2DRect:1-fill-flat-triangles">
	<description>
		An auto-generated shader for simulating deprecated OpenGL features in OpenGL 3.2+
	</description>
	<param name="position" type="vec3" state="POSITION" />
	<param name="texcoord" type="vec2" state="TEXCOORD" />
	<param name="tex0" type="int" default="0" />
	<param name="textureMatrix0" type="mat4" state="TEXTURE0_MATRIX" />
	<param name="modelViewProjectionMatrix" type="mat4" state="MODELVIEW_PROJECTION_MATRIX" />
	<param name="color" type="vec4" state="COLOR0" />
	<language name="glsl" version="1.5">
		<bind param="position" program="vp" />
		<bind param="texcoord" program="vp" />
		<bind param="tex0" program="fp" />
		<bind param="textureMatrix0" program="vp" />
		<bind param="modelViewProjectionMatrix" program="vp" />
		<bind param="color" program="vp" />
		<program name="vp" type="vertex">
			<![CDATA[
			// Preprocessor
			#version 330 core
			
			// Definitions
			
			
			// Uniforms
			
			
			
			uniform mat4 modelViewProjectionMatrix;
			
			
			uniform mat4 textureMatrix0;
			
			
			
			
			// Attributes
			in vec4 Vertex_UV;
			in vec3 position;
			uniform vec4 color;
			in vec2 texcoord;
			
			
			
			// Output
			out jit_PerVertex {
				flat vec4 color;
				vec2 texcoord0; 
				out vec4 Vertex_UV;
				
			} jit_out;
			
			
			// Library functions
			
			
			
				
			void main() {
				
				gl_Position = modelViewProjectionMatrix * vec4(position, 1.);	
				
				
				
				
				jit_out.color = color;
				
				
				
				jit_out.texcoord0 = vec2(textureMatrix0*vec4(texcoord, 0., 1.));
				
				jit_out.Vertex_UV = Vertex_UV;
				
			}
			
			
			
		]]>
		</program>
		<program name="fp" type="fragment">
			<![CDATA[
			#version 330 core
			
			in jit_PerVertex {
				flat vec4 color;
				vec2 texcoord0; 
				vec4 Vertex_UV;
				vec2 uv;
				vec2 xy;
				float d;
			} jit_in;
			out vec4 color;
			
			
			uniform sampler2DRect tex0;
			uniform float BarrelPower;
			const float PI = 3.1415926535;

			vec2 Distort(vec2 p)
				{
					float theta  = atan(p.y, p.x);
					float radius = length(p);
					radius = pow(radius, BarrelPower);
					p.x = radius * cos(theta);
					p.y = radius * sin(theta);
					return 0.5 * (p + 1.0);
				}
			
			
			void main() {


				vec2 xy = 2.0 * Vertex_UV.xy - 1.0;
				
				float d = length(xy);
				if (d < 1.0)
				{
					uv = Distort(xy);
				}
				else
				{
					uv = Vertex_UV.xy;
				}
				vec4 c = texture(tex0, uv);
				color  = c;
			
				color = jit_in.color;
			
			
			
				color *= texture(tex0, jit_in.texcoord0);
			
			}	
			
			
		]]>
		</program>
	</language>
</jittershader>
